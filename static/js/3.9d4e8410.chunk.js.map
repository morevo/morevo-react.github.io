{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","Todo/AddTask.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","AddTask","onCreate","input","defaultValue","useState","setValue","bind","onChange","event","clear","useInputValue","action","className","onSubmit","preventDefault","trim","htmlFor","type","name","id","placeholder"],"mappings":"uHAAe,SAASA,EAAgBC,EAAKC,EAAKC,GAYhD,OAXID,KAAOD,EACTG,OAAOC,eAAeJ,EAAKC,EAAK,CAC9BC,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZP,EAAIC,GAAOC,EAGNF,ECVT,SAASQ,EAAQC,EAAQC,GACvB,IAAIC,EAAOR,OAAOQ,KAAKF,GAEvB,GAAIN,OAAOS,sBAAuB,CAChC,IAAIC,EAAUV,OAAOS,sBAAsBH,GACvCC,IAAgBG,EAAUA,EAAQC,QAAO,SAAUC,GACrD,OAAOZ,OAAOa,yBAAyBP,EAAQM,GAAKV,eAEtDM,EAAKM,KAAKC,MAAMP,EAAME,GAGxB,OAAOF,EAGM,SAASQ,EAAeC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAE/CA,EAAI,EACNb,EAAQL,OAAOqB,IAAS,GAAMC,SAAQ,SAAUxB,GAC9C,EAAemB,EAAQnB,EAAKuB,EAAOvB,OAE5BE,OAAOuB,0BAChBvB,OAAOwB,iBAAiBP,EAAQjB,OAAOuB,0BAA0BF,IAEjEhB,EAAQL,OAAOqB,IAASC,SAAQ,SAAUxB,GACxCE,OAAOC,eAAegB,EAAQnB,EAAKE,OAAOa,yBAAyBQ,EAAQvB,OAKjF,OAAOmB,E,gCCkBMQ,UAlCf,YAAgC,IAAbC,EAAY,EAAZA,SACXC,EAfR,WAA2C,IAApBC,EAAmB,uDAAJ,GACpC,EAA0BC,mBAASD,GAAnC,mBAAO7B,EAAP,KAAc+B,EAAd,KAEA,MAAO,CACLC,KAAM,CACJhC,QACAiC,SAAU,SAACC,GAAD,OAAWH,EAASG,EAAMhB,OAAOlB,SAG7CmC,MAAO,kBAAMJ,EAAS,KACtB/B,MAAO,kBAAMA,IAKDoC,CAAc,IAU5B,OAEE,aADA,CACA,QAAMC,OAAO,OAAOC,UAAU,OAAOC,SAVvC,SAAuBL,GACrBA,EAAMM,iBAEFZ,EAAM5B,QAAQyC,SAChBd,EAASC,EAAM5B,SACf4B,EAAMO,UAKR,SACE,sBAAKG,UAAU,cAAf,UACE,uBAAOI,QAAQ,YAAYJ,UAAU,cAArC,kBAGA,6BACMV,EAAMI,MADZ,IAEEM,UAAU,4BACVK,KAAK,OACLC,KAAK,OACLC,GAAG,YACHC,YAAY,gBAEd,wBAAQR,UAAU,6BAA6BK,KAAK,SAApD","file":"static/js/3.9d4e8410.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction useInputValue(defaultValue = \"\") {\r\n  const [value, setValue] = useState(defaultValue); // useState, начальное состояние элемента value\r\n\r\n  return {\r\n    bind: {\r\n      value,\r\n      onChange: (event) => setValue(event.target.value), // Передаем в useState функцию изменения, таргет именно на инпуте. То есть в value лежит текст введённый в инпут, передаем в setState функцию, которая меняет value который лежит в const [value, setValue],  *event.target.value - и достали из него наш value и передали в useState для изменения value*\r\n    },\r\n    \r\n    clear: () => setValue(\"\"),\r\n    value: () => value,\r\n  };\r\n}\r\n\r\nfunction AddTask({ onCreate }) {\r\n  const input = useInputValue(\"\");\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n\r\n    if (input.value().trim()) {\r\n      onCreate(input.value());\r\n      input.clear();\r\n    }\r\n  }\r\n  return (\r\n    // Вешаем на форму обработчик событий onSubmit, после submit, клика по кнопке, мы переходим в функцию, и выполняем там проверку, если value из input'a не пустое, тогда передаем его в функцию которая находится в app.js, и после этого вызываем состояние пустой строки, setValue(\"\");\r\n    <form action=\"form\" className=\"form\" onSubmit={submitHandler}>\r\n      <div className=\"form__inner\">\r\n        <label htmlFor=\"enterText\" className=\"form__label\">\r\n          Task\r\n        </label>\r\n        <input\r\n          {...input.bind}\r\n          className=\"form__input form__padding\"\r\n          type=\"text\"\r\n          name=\"text\"\r\n          id=\"enterText\"\r\n          placeholder=\"Enter task\"\r\n        />\r\n        <button className=\"form__button form__padding\" type=\"submit\">\r\n          Add new task\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddTask;\r\n\r\nAddTask.propTypes = {\r\n  onCreate: PropTypes.func.isRequired,\r\n};\r\n\r\n// 85 AddTask {/* Для этого нам приходиться создавать новый компонент AddTask.js, и создаем там обычную функцию, без экспорта. Создаем форму, внутри input, button, и добавляем этот компонент в App.js */}\r\n// 86 {/* Теперь нам нужно оживить эту форму, импортируем наш хук useState в форму. Создадим переменную например value и setValue [value, setValue]*/}\r\n// 87 {/* И начальное состояние этого value будет пустой строкой const [value, setValue] = useState(\"\") */}\r\n// 88 {/* Теперь нам необходимо привязать значение [value, setValue] к input, то есть мы будем указывать value={value} как значение value, и дальше, чтобы следить за input'om, мы можем указать свойство onChange. в onChange мы передаем колбэк event, и дальше чтобы изменить состояние value, мы будем вызывать функцию setValue, со значением event.target.value */}\r\n// 89 {/* Далее добавим рабочие события на форму, событие называется onSubmit, и там мы будем вызывать метод, который будет называться например submitHandler */}\r\n// 90 {/* Теперь этот метод submitHandler нам необходимо создать как обычную функцию, он в себя будет принимать тот же параметр event, у которого мы можем отменить дефолтное поведение */}\r\n// 91 {/* И теперь делаем там небольшую валидацию внутри функции, если у нас будет input пустой, value.trim(), то тогда мы ничего не будем делать (trim удаляем лишние пробелы) */}\r\n// 92 {/* А если в инпуте что-то есть, тогда мы будем будем обращаться к свойству например onCreate, куда я буду передавать значение value. А onCreate мы будем передавать сюда как параметр */}\r\n\r\n/* Form */ // \r\n// Импортируем сюда useState через import\r\n// Создаем переменную useState\r\n// Потом привязываем данное значение useState - value к input, input value={value} чтобы передавать их из input в useState как состояние\r\n// Для слежения за инпутом мы создаем свойство onChange, куда мы должны передать колбэк\r\n// И далее чтобы изменить состояние value, мы будем вызывать функцию setValue со значением event.target.value, event.target отслеживает элемент на котором произошло событие\r\n// Далее добавим обработчик события на форму, обработчик называется onSubmit, и там мы будем вызывать метод submitHandler, отменяем стандартное поведение формы\r\n// Создаем метод submitHandler, он принимает по умолчанию event, у которого мы отменяем дефолтное поведение, для того чтобы страница не перезагружалась\r\n// И делаем валидацию на проверку input'a, если input пустой, то тогда мы ничего не будем делать\r\n// А если в нем что-то будет, тогда if (value.trim()) { \r\n\r\n/* event.target.value отслеживает элемент на котором произошло событие */\r\n// event.target это отсылка к объекту, на котом сработало событие. Или другими словами, он указывает на HTML элемент на котором сработало событие. Событие в нашем случае это клик. Объект на котором отработало событие это <input/>. ** label рассматривается, как часть объекта input — поэтому мы видимо их обоих**.\r\n\r\n//Свойство event.target содержит элемент, на котором сработало событие - event.target.value - и достали из него наш value и передали в useState для изменения value. Это не тот элемент, к которому был привязан обработчик этого события, а именно самый глубокий тег, на который непосредственно был, к примеру, совершен клик.\r\n// event.target определяем элемент на котором произошло событие, а event.target.value уже вытягивает из этого элемента именно наш введённый текст (именно значение value у инпута), и перемещает его в useState для изменения, в функцию setValue. И оттуда уже в функцию обработчик onSubmit на форме - submitHandler\r\n\r\n//Свойство event.target содержит элемент, на котором сработало событие - event.target.value - и достали из него наш value и передали в useState для изменения value.\r\n\r\n/* Более продвинутая разработка, и более прикольные концепты которые есть в React */\r\n// 97 {/* Рассмотрим это все на примере компонента AddTask*/}\r\n// Мы сейчас пользуемся здесь стандартный хуком который называется useState\r\n// Мы можем создавать свои хуки, и улучшать приложение\r\n// Например мы знаем что мы передаем в input 2 свойства, value и setValue\r\n// Создадим новый хук (function useInputValue), которые мы будем называть со строчки use, и далее useInputValue например\r\n// Заносим в function параметр, то есть начальное состояние, делаем его пустой строкой\r\n// Далее мы выносим логику по определению этого Value, то есть заносим внутрь функции наш useState, и передаем в useState(\"\") вместо пустой строки, наш defaultValue\r\n// В качестве значения, мы можем вернуть объект, у которого будет поле value, которое будет ровняться значению value, поэтому value просто пишем без равно\r\n// Задаем также значение onChange, функция которая принимает event, и то что она будет делать, она будет обращаться к методу setValue и задавать ему значение event.target.value\r\n// Обратим внимание на то, что данный новый хук возвращает объект, ключи которого нужны для input'a value={value} и onChange={(event) => setValue(event.target.value)}\r\n// Теперь как нам это может помочь. В компоненте AddTask, создаем переменную например input, и воспользуемся своим хуком который называется useInputValue(), по умолчанию мы туда передаем пустую строчку.\r\n// И теперь для обработки нашего инпута, мы можем удалить строчку value={value}  onChange={(event) => setValue(event.target.value)} у инпута, обратиться к фигурным скобкам и, и с помощью оператора spread развернуть объект input'a {...input}\r\n// И на самом деле данный оператор {...input} поместит в input значение value и значение onChange\r\n// Теперь меняем немного код, чтобы не было ошибок\r\n"],"sourceRoot":""}