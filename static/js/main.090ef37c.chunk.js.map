{"version":3,"sources":["Todo/Todoclose.js","Todo/Todoitem.js","Todo/Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["TodoClose","type","className","data-exit","xlinkHref","styles","li","padding","margin","position","display","alignItems","justifyContent","border","borderRadius","TodoItem","item","index","style","title","ul","listStyle","fontSize","TodoList","props","tasks","map","id","App","completed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gLAEe,SAASA,IACtB,OACE,wBAAQC,KAAK,SAASC,UAAU,eAAeC,YAAU,QAAzD,SACE,qBAAKD,UAAU,oBAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,qBAAKA,UAAU,wBAAwBE,UAAU,iBCJ3D,IAAIC,EAAS,CACXC,GAAI,CACFC,QAAS,WACTC,OAAQ,SACRC,SAAU,WACVC,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAChBC,OAAQ,oBACRC,aAAc,SA0BHC,MAtBf,YAAoC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAExB,OACE,qBAAIC,MAAOb,EAAOC,GAAlB,UACE,iCACE,uBAAOL,KAAK,aACZ,iCAASgB,EAAQ,IAChB,KAAOD,EAAKG,SAGf,cAACnB,EAAD,QCvBFK,EAAS,CACXe,GAAI,CACFZ,OAAQ,SACRD,QAAS,OACTc,UAAW,OACXC,SAAU,SA2BCC,MAvBf,SAAkBC,GAChB,OACE,oBAAIN,MAAOb,EAAOe,GAAlB,SACGI,EAAMC,MAAMC,KAAI,SAACV,EAAMC,GAAP,OACf,cAAC,EAAD,CAAUD,KAAMA,EAAMC,MAAOA,GAAYD,EAAKW,UCKvCC,MAlBf,WAQE,OACE,qBAAK1B,UAAU,OAAf,SACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,cAAd,uBACA,cAAC,EAAD,CAAUuB,MAXJ,CACV,CAAEE,GAAI,EAAGE,WAAW,EAAOV,MAAO,oBAClC,CAAEQ,GAAI,EAAGE,WAAW,EAAOV,MAAO,eAClC,CAAEQ,GAAI,EAAGE,WAAW,EAAOV,MAAO,oBAClC,CAAEQ,GAAI,EAAGE,WAAW,EAAOV,MAAO,mCAClC,CAAEQ,GAAI,EAAGE,WAAW,EAAOV,MAAO,sCCGvBW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.090ef37c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function TodoClose() {\r\n  return (\r\n    <button type=\"button\" className=\"modal__close\" data-exit=\"close\">\r\n      <div className=\"modal__pleace-img\">\r\n        <svg className=\"modal__close-img\">\r\n          <use className=\"modal__close-img-icon\" xlinkHref=\"#close\"></use>\r\n        </svg>\r\n      </div>\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoClose from \"./Todoclose\";\r\nlet styles = {\r\n  li: {\r\n    padding: \"0.5rem 0\",\r\n    margin: \"0.5rem\",\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    border: \"1px solid #2B2A2C\",\r\n    borderRadius: \"50px\",\r\n  },\r\n};\r\n\r\nfunction TodoItem({ item, index }) {\r\n  // Если мне нужно получить сразу элемент не оборачивая его в объект в параметрах функции, тогда я пишу название элемента в {} скобках\r\n  return (\r\n    <li style={styles.li}>\r\n      <span>\r\n        <input type=\"checkbox\" />\r\n        <strong>{index + 1}</strong>\r\n        {\". \" + item.title}\r\n      </span>\r\n\r\n      <TodoClose />\r\n    </li>\r\n  );\r\n}\r\n\r\n// 31 {/* Добавим также валидацию для компонента Todoitem.js. Загружаем библиотеку prop-types также в файл TodoItem, Удаляем export default перед объявлением функции, добавляем в конец файла, пишем свойства для функции TodoItem.propTypes, и определяем элементы. item: PropTypes.object.isRequired - item это объект, который необходимый, требуемый для работы этого компонента TodoItem. И index: PropTypes.number.isRequired - index это тип number, который необходимый для работы этого компонента TodoItem */}\r\n// 33 {/* Теперь поработаем над шаблоном каждого из элементов <li>, превратим их во что-то более красивое, переходим в компонент Todoitem, и задаем некоторую структуру, в тэге <li></li> будет лежать тэг span, внутри span будет лежать элемент input с type=\"checkbox\". Кладём все элементы внутри <li> внутрь тэга <span>, а после тэга <span> в <li> мы будем показывать тэг <button> а внутри него будет лежать специальный html символ - &times; который добавляем крестик */}\r\nTodoItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./Todoitem\";\r\nimport PropTypes from \"prop-types\"; // Импортируем библиотеку PropTypes из \"prop-types\"\r\nlet styles = {\r\n  ul: {\r\n    margin: \"0 auto\",\r\n    padding: \"1rem\",\r\n    listStyle: \"none\",\r\n    fontSize: \"1rem\",\r\n  },\r\n};\r\n\r\nfunction TodoList(props) {  // Мой массив tasks здесь обернулся в объект, потому как мы его не взяли в {}\r\n  return (\r\n    <ul style={styles.ul}>\r\n      {props.tasks.map((item, index) => (\r\n        <TodoItem item={item} index={index} key={item.id} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n// 24 {/* Про типизацию, JS это не типизированный язык программирования, и мы можем передавать одним и тем же объектам разные типы, и есть потенциальные ошибки при передаче свойств. Поэтому в React хорошей практикой является описание входящих свойств в нужный компонент. То есть если я передаю объект от <TodoList todos={todos}></TodoList>, TodoList(props) значит я должен это описать что пришел именно объект. */}\r\n// 25 {/* Устанавливаем библиотеку через npm, команда установки npm install prop-types. */}\r\n// 26 {/* Мы значем что мы принимаем в TodoList.js в параметр функции объект props, в котором лежит наш массив объектов tasks */}\r\n// 27 {/* Импортируем библиотеку PropTypes из \"prop-types\" в файл где нужно обозначить входящее свойство(параметр) в компонент */}\r\n// 28 {/* Для того чтобы добавить валидацию того что это за свойство, убираем приставку export default перед объявлением функции, и дальше, в конце кода мы будет экспортировать эту функцию отдельно */}\r\n// 29 {/* Теперь мы можем обратиться к функции TodoList и определить у нее свойство которое называется propTypes, это обычный объект, где мы будем описывать в качестве значения ключа, название свойства, у меня это tasks, и дальше мы будем пользоваться библиотекой prop-types чтобы определить её тип */}\r\n// 30 {/* С помощью библиотеки prop-types мы можем делать более сложные валидации, например указать что tasks это не просто массив, а массив объектов - tasks: PropTypes.arrayOf(PropTypes.object).isRequired. isRequired говорит о том, что массив с объектами нам нужен для работы с данным компонентов, то есть с функцией TodoList  */}\r\n// 31 {/* Добавим также валидацию для компонента Todoitem.js ->*/}\r\n// 32 {/* Сейчас, в компоненте TodoList в качестве index мы передаем числа, но если мы поменяем index в коде выше и сделаем его строкой, то мы увидим ошибку в консоле, так как компонент TodoItem ожидает как раз таки число, а мы передаем строку, так как мы указывали что index это число в проверке на prop-types, получается это такой мини тест, мини статичность */}\r\nTodoList.propTypes = {\r\n    tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n}\r\n\r\nexport default TodoList;","import React from \"react\";\nimport TodoList from \"./Todo/Todolist\";\n\nfunction App() {\n  let tasks = [\n    { id: 1, completed: false, title: \"Learn TypeScript\" },\n    { id: 2, completed: false, title: \"Learn React\" },\n    { id: 3, completed: false, title: \"Learn JavaScript\" },\n    { id: 4, completed: false, title: \"Daily to learn some interesting\" },\n    { id: 5, completed: false, title: \"Get an offer on web. dev.\" },\n  ];\n  return (\n    <div className=\"todo\">\n      <div className=\"todo__inner\">\n        <h1 className=\"todo__title\">Todo list</h1>\n        <TodoList tasks={tasks} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}