{"version":3,"sources":["context.js","Todo/Todoitem.js","Todo/Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","styles","li","padding","margin","position","display","alignItems","justifyContent","border","borderRadius","strong","newInput","width","height","liSpan","change","background","TodoItem","task","index","changeTitle","classes","removeTask","useContext","completed","push","style","className","id","type","onChange","checked","htmlFor","join","title","data-exit","onClick","bind","xlinkHref","ul","listStyle","fontSize","TodoList","props","tasks","map","onToggle","App","useState","setTasks","Provider","value","filter","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04edde0c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n\r\n\r\n// 64 {/* В этом файле мне необходимо создать определённый контекст который в последствии я буду использовать. Для начала импортируем React из \"react\" */}\r\n// 65 {/* И дальше я создам переменную которую я могу назвать как угодно например Context, и я её получу из библиотеки React с помощью функции React.createContext(); */}\r\n// 66 {/* Далее мы просто по default экспортируем данный контекст (не функцию а export default Context), и теперь мы можем его использовать. Переходим в Компонент App */}","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Context from \"../context\";\nlet styles = {\n  li: {\n    padding: \"0.4rem 0\",\n    margin: \"0.5rem\",\n    position: \"relative\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    border: \"1px solid #6a696b\",\n    borderRadius: \"15px\",\n  },\n\n  strong: {\n    margin: \"0 0.3rem 0 0\",\n  },\n\n  newInput: {\n    width: \"17px\",\n    height: \"17px\",\n    borderRadius: \"20px\",\n    margin: \"0 0.4rem\",\n  },\n\n  liSpan: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  \n  change: {\n    background: \"red\",\n  }\n};\n\nfunction TodoItem({ task, index, changeTitle}) {\n  let classes = []; \n  const { removeTask } = useContext(Context);\n  if(task.completed) {\n    classes.push(\"done\");\n  }\n  // Если мне нужно получить сразу элемент не оборачивая его в объект в параметрах функции, тогда я пишу название элемента в {} скобках\n  return (\n    <li style={styles.li}>\n      <span style={styles.liSpan}>\n        <span className=\"container\">\n          <input id={index + 1} type=\"checkbox\" onChange={() => changeTitle(task.id)} checked={task.completed}/>\n        <label htmlFor={index + 1} className=\"todoitem__new-input\" style={styles.newInput}></label>\n        </span>\n        <strong style={styles.strong}>{index + 1}. </strong>\n        <span className={classes.join(\" \")}>{task.title}</span>\n      </span>\n    \n      <button type=\"button\" className=\"modal__close\" data-exit=\"close\">\n      <div className=\"modal__pleace-img\" onClick={removeTask.bind(null, task.id)}>\n        <svg className=\"modal__close-img\">\n          <use className=\"modal__close-img-icon\" xlinkHref=\"#close\"></use>\n        </svg>\n      </div>\n    </button>\n    </li>\n  );\n}\n\n// 31 {/* Добавим также валидацию для компонента Todoitem.js. Загружаем библиотеку prop-types также в файл TodoItem, Удаляем export default перед объявлением функции, добавляем в конец файла, пишем свойства для функции TodoItem.propTypes, и определяем элементы. item: PropTypes.object.isRequired - item это объект, который необходимый, требуемый для работы этого компонента TodoItem. И index: PropTypes.number.isRequired - index это тип number, который необходимый для работы этого компонента TodoItem */}\n// 33 {/* Теперь поработаем над шаблоном каждого из элементов <li>, превратим их во что-то более красивое, переходим в компонент Todoitem, и задаем некоторую структуру, в тэге <li></li> будет лежать тэг span, внутри span будет лежать элемент input с type=\"checkbox\". Кладём все элементы внутри <li> внутрь тэга <span>, а после тэга <span> в <li> мы будем показывать тэг <button> а внутри него будет лежать специальный html символ - &times; который добавляем крестик */}\n// 34 {/* Добавляем событие к чекбоксу, делаем для него метод onChange={() =>} в который помещает колбэк функцию, которая будет что-то делать, нам нужно поменять значение completed: false на true, и если он будет равен true, нам нужно зачеркивать текст. Указываем для проверки вывод в консоль item.id (item это у нас объект с {id: 1, completed: false, title: \"Learn TypeScript\"}, для того чтобы передать в родительскую функцию изменения, добавляем в Компонент TodoItem параметром функцию. И когда у меня будет происходить событие onChange, мы будем вызывать метод changeTitle, куда мы будем передавать item.id того элемента по которому кликнул. Опишем свойство changeTitle в propTypes чтобы у нас была валидация - changeTitle: PropTypes.func.isRequired,*/}\n// 35 {/* Теперь мы знаем что в компонент TodoItem мы передаем функцию changeTitle, идём в Todolist и работаем там  */}\n// 41 {/* То есть мы создаем метод например onChange на том элементе который будем отслеживать или менять, передали в него функцию колбэк changeTitle которую передали сюда в TodoItem компонент через родительский элемент. onChange={() => changeTitle(item.id)} -> Идём в TodoList, создаем там у TodoItem компонента функцию с методом которая будет передавать наш item.id в родительские, вышестоящие элементы - changeTitle={props.onToggle}. -> Дальше идём в App.js компонент, у Компонента TodoList создаем метод с названием функции onToggle который передается в Todolist onToggle={toggleTodo}. Далее создаем в App Компоненте обычную функцию под названием toggleTodo, проверяем id вывод в консоль. Дальше сравниваем что если элемент массива tasks.id будет равен === id который мы передали с TodoItem, то тогда мы будем менять состояние элемента completed с false на true */}\n// 42 {/* В changeTitle мы передаем item.id, передаем changeTitle в параметр функции -> 43 */}\n// 56 {/* В данный момент если мы будем нажимать на checkbox, у нас ничего не будет меняться(перерендериваться) наш task.complated - если true - добавляем класс, если false, не добавляем, как нам это сделать */}\n// 57 {/* Допустим мы знаем что в реакте все идёт через javascript, поэтому классы здесь тоже не исключение, мы можем завести переменную classes в TodoItem, которая по умолчанию будет пустым массивом, и дальше мы спросим, if(task.completed(будет true)) {}(тогда мы будем добавлять массиву classes, методом push, класс который называется \"done\")*/}\n// 58 {/* Теперь данный массив classes нам нужно передать в шаблон, тэгу span где содержится наш текст task.title который нужно зачеркнуть */}\n// 59 {/* И теперь в чём заключается идея, теперь если мы нажимаем на какой-нибудь toDo у нас добавляется динамически этот класс \"done\", а когда убираем check, то класс убирается */}\n// 61 {/* Для того что бы это исправить,в компоненте TodoItem мы обращаемся к input'y, нам нужно у input указать поле checked куда мы будем передавать условие, у наше условие находится в task.completed. (если task.completed будет true, тогда checked, если false, тогда empty). Теперь все работает корректно */}\n// 62 {/* Теперь поработаем над кнопочкой каждого из Todo, сейчас если мы по ней кликаем, то ничего не происходит, но было бы неплохо удалять какой-либо из элементов массива, и из шаблона кликнув по крестику*/}\n// 63 {/* Для этого розберем следующий концепт. Во превых в первом примере мы с onChange разобрали как мы можем поэтапно передавать функции от дочерних до родительских, и для этого нам сначало пришлось передавать onChange для Компонента TodoList, после этого нам пришлось передать свойство props.onToggle в Компонент App, но если вложенность будет намного больше, то тогда у меня бы намного больше кода. Поэтому в React есть очень крутая фича которая позволяет напрямую передавать определённые свойства избегая некоторых промежуточных этапов */}\n// 64 {/* Для этого в папке src я создам новый файл, который я назову context.js, идём в него -> */}\n// 74 {/* Для начала мне нужно добавить сюда тот самый контекст через import Context from  */}\n// 75 {/* Дальше, учитывая что наш компонент TodoItem является функциональным, то есть это функция, мне необходимо обработать этот контекст Context который мы импортировали  */}\n// 76 {/* И для этого в React существуем еще один hook, который называется useContext, который мы можем забирать таким образом import React, {useContext} from \"react\"; */}\n// 77 {/* Далее нам необходимо воспользоваться этой функцией внутри TodoItem Компонента, для этого создаем переменную-деструктуризацию, const {} = useContext, присваиваем ей функцию useContext, куда просто передадим тот Context который мы передали в Компоненте App */}\n// 78 {/* На выходе в деструктуризации мы получаем объект, который совпадает с тем значением value{{removeTask}} которое мы передаем, и учитывая что у объекта value есть ключ Task, то мы также в Компоненте можем получить это значение, в деструктуризации */}\n// 79 {/* removeTask, это функция которая принимает в себя некоторый id, вызываем обработчик событий onClick на кнопке close, и просто передаем туда значение removeTodo */}\n// 80 {/* Но мы помним что данная функция removeTask должна должна быть вызвана с тем id который необходимо удалить, мы можем либо вызвать collback функцию, либо вызвать метод bind у функции,и активировать её при нажатии что бы она не вызывалась сразу. onClick={removeTask.bind(null, task.id)} первым параметром передаем любое значение, например null, а вторым значение которое мы будем передавать в параметр функции removeTask */}\n// 81 {/* Теперь удаление работает, теперь мы удаляем необходимые Todo tasks, учитывая то, что мы теперь избегаем компонент TodoList, и в TodoList у нас нету никакой логики связанной с удалением Todo */}\n// 82 {/* Но теперь, если мы удалим все Todo, то мы получаем чистый лист, и было бы неплохо написать что если у нас нету задач, то мы так и напишем, что активных задач нету, для этого переходим в Компонент App */}\n\nTodoItem.propTypes = {\n  task: PropTypes.object.isRequired,\n  index: PropTypes.number,\n  changeTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./Todoitem\";\nimport PropTypes from \"prop-types\"; // Импортируем библиотеку PropTypes из \"prop-types\"\nlet styles = {\n  ul: {\n    margin: \"0 auto\",\n    padding: \"1rem\",\n    listStyle: \"none\",\n    fontSize: \"1rem\",\n  },\n};\n\nfunction TodoList(props) {  // Мой массив tasks здесь обернулся в объект, потому как мы его не взяли в {}\n  return (\n    <ul style={styles.ul}>\n      {props.tasks.map((task, index) => (\n        <TodoItem task={task} index={index} key={task.id} changeTitle={props.onToggle}/>\n      ))}\n    </ul>\n  );\n}\n\n// 24 {/* Про типизацию, JS это не типизированный язык программирования, и мы можем передавать одним и тем же объектам разные типы, и есть потенциальные ошибки при передаче свойств. Поэтому в React хорошей практикой является описание входящих свойств в нужный компонент. То есть если я передаю объект от <TodoList todos={todos}></TodoList>, TodoList(props) значит я должен это описать что пришел именно объект. */}\n// 25 {/* Устанавливаем библиотеку через npm, команда установки npm install prop-types. */}\n// 26 {/* Мы значем что мы принимаем в TodoList.js в параметр функции объект props, в котором лежит наш массив объектов tasks */}\n// 27 {/* Импортируем библиотеку PropTypes из \"prop-types\" в файл где нужно обозначить входящее свойство(параметр) в компонент */}\n// 28 {/* Для того чтобы добавить валидацию того что это за свойство, убираем приставку export default перед объявлением функции, и дальше, в конце кода мы будет экспортировать эту функцию отдельно */}\n// 29 {/* Теперь мы можем обратиться к функции TodoList и определить у нее свойство которое называется propTypes, это обычный объект, где мы будем описывать в качестве значения ключа, название свойства, у меня это tasks, и дальше мы будем пользоваться библиотекой prop-types чтобы определить её тип */}\n// 30 {/* С помощью библиотеки prop-types мы можем делать более сложные валидации, например указать что tasks это не просто массив, а массив объектов - tasks: PropTypes.arrayOf(PropTypes.object).isRequired. isRequired говорит о том, что массив с объектами нам нужен для работы с данным компонентов, то есть с функцией TodoList  */}\n// 31 {/* Добавим также валидацию для компонента Todoitem.js ->*/}\n// 32 {/* Сейчас, в компоненте TodoList в качестве index мы передаем числа, но если мы поменяем index в коде выше и сделаем его строкой, то мы увидим ошибку в консоле, так как компонент TodoItem ожидает как раз таки число, а мы передаем строку, так как мы указывали что index это число в проверке на prop-types, получается это такой мини тест, мини статичность */}\n// 36 {/* Теперь мы знаем что в компонент TodoItem мы передаем функцию changeTitle, так как здесь мы вызываем Компонент TodoItem, он должен передавать ту же функцию которую мы указали в todoItem. TodoItem выводится в списке компонента TodoList поэтому мы его должны вызвать для каждого компонента здесь, в Todolist нашу функцию changeTitle*/}\n// 37 {/* Данное событие changeTitle нам нужно соеденить с родительским элементом App.js, поэтому мы будем передавать в changeTitle объект props с методом onToggle props.onToggle  */}\n// 38 {/* Теперь я знаю что я принимаю в Компоненте todoList метод onToggle, поэтому описываем его в propTypes здесь ниже*/}\n// 39 {/* Теперь я запоминаю данное название метода здесь onToggle, и я должен передать его в родительский компонент чтобы все остальные его видели*/}\n// 43 {/* В props.onToggle мы передаем changeTitle -> 44 */}\nTodoList.propTypes = {\n    tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onToggle: PropTypes.func.isRequired,\n\n}\n\nexport default TodoList;","import React from \"react\";\nimport TodoList from \"./Todo/Todolist\";\nimport Context from \"./context\";\n\nfunction App() {\n\n  let [tasks, setTasks] = React.useState([\n    { id: 1, completed: false, title: \"Learn TypeScript\" },\n    { id: 2, completed: false, title: \"Learn React\" },\n    { id: 3, completed: false, title: \"Learn JavaScript\" },\n    { id: 4, completed: false, title: \"Daily to learn some interesting\" },\n    { id: 5, completed: false, title: \"Get an offer on web. dev.\" },\n  ]);\n\n  function toggleTask(id) {\n    setTasks( tasks.map( (task) => {\n      if(task.id === id) {\n        task.completed = !task.completed;\n      }\n      return task;\n    }))\n  }\n  \n  function removeTask(id) {\n    setTasks( tasks.filter( (task) => task.id !== id)\n    )\n  }\n\n  return (\n    <Context.Provider value={{removeTask}}>\n    <div className=\"todo\">\n      <div className=\"todo__inner\">\n        <h1 className=\"todo__title\">Todo list</h1>\n\n        {tasks.length ? <TodoList tasks={tasks} onToggle={toggleTask}/> : <h2 className=\"todolist__clear\">No active tasks</h2> }\n      </div>\n    </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n\n// 39 {/* Теперь в компоненте App, я заношу данный метод onToggle в компонент TodoList из Компонента App */}\n// 40 {/* Создаем в Компоненте App новую функцию с произвольным названием например toggleTodo, создаем эту функцию, она будет принимать в себя некоторые id */}\n// 44 {/* В toggleTodo мы передаем onToggle */}\n// 45 {/* Мы значем что в toggleTask(id) у нас приходит id (как параметр) из TodoItem, проверим это в console.log(id), и действительно выводится id того чекбокса на который мы кликнули,теперь мы можем изменить состояние(state), для этого мы можем обратиться к массиву tasks, и просто изменить его, просто переопределяем массив tasks c помощью метода map, где на каждой итерации мы принимаем объект task, и дальше спрашиваем, если task.id будет равен id который пришел из Компонента TodoItem, по которому мы кликнули, тогда мы будем менять поле task.completed на противоположный, и возвращать после этого наш task объект {id: x, completed: x, title: \"Learn TypeScript\"}*/}\n// 45 {/* Теперь посмотрим что в Компоненте TodoItem у нас меняется значение todo, просто выведем в консоль наш task объект с изменёнными данными*/}\n// 46 (TodoItem copy) {/* В данный момент если мы будем нажимать на checkbox, у нас ничего не будет меняться(перерендериваться) наш task.complated */}\n// 47 {/* Но на самом деле, таким образом state(состояние) мы не можем задавать, ничего меняться не будет */}\n// 48 {/* То есть для того чтобы определить state за которым будет следить реакт, для того чтобы перерендеривать наш шаблон, и добавлять динамики приложению, мы должны определять по другому. Мы не може просто завести какую-то переменную, и менять её состояние */}\n// 49(useState) {/* Для того чтобы менять состояние в React нам нужно воспользоваться специальной функцией в React которая называется useState - это хуки */}\n// 50 {/* Идея такая, заводим переменную \"state\" в App Компоненте, которая будет результатом работы React'a и его функции React.useState, в функцию useState мы передаем некоторое начальное состояние которое мы хотим задать именно для данного state(состояния), для этого переносим весь наш массив tasks в первый аргумент useState. */}\n// 51 {/* Теперь у нас есть некоторые ошибки, и сейчас нам нужно поработать с переменной state которая является React.useState. Как нам получить state, и что вообще возвращает функция useState ? */}\n// 52 {/* Функция useState всегда нам возвращает массив состоящий всегда из двух элементов,первый элемент массива это непосредственно само состояние, то есть по умолчанию оно будет равно данному дефолтному значению - нашему массиву tasks. А второй элемент это функция, которая позволяет изменять данное состояние для того чтобы реакт видел эти изменения, и для того чтобы было более комфортно с этим было работать, мы можем написать деструктуризацию массива, где первым параметром мы будем принимать state, в нашем случае это массив (tasks), а второй переменной будет функция, которую обычно называют через префикс set с помощью которой мы будет изменять состояние (setTasks).  */}\n// 53 {/* Теперь, в функции toggleTask мы можем воспользоваться методом setTasks для того чтобы изменить состояние нашего массива, и для этого мы просто вызовем метод setTasks куда передадим новое значение(состояние). То есть tasks.map мы передаем в setTasks, он нам вернёт новый массив который изменит массив tasks */}\n// 54 {/* И сейчас после того как мы кликаем по checkbox'ам, они появляються в console.log и меняют свое состояние свойства task.complated, и перерендеривается. То есть мы меняем полностью состояние, и мы видим полностью эти изменения, тем самым мы правильно изменяем это состояние */}\n// 55 {/* Теперь нам необходимо отобразить то, что мы выполнили Todo, и для этого добавить определённый класс, создаем в state.less новый класс который будет называться .done {}, и у него будет свойство text-decoration: line-through(текст зачернтуый), и далее нам этот класс необходимо добавлять в компоненте todoItem в зависимости от его поля completed */}\n// 60 {/* Если же в начальном state в useState указать у tasks.completed true вместо false, тогда класс будет меняться наоборот, когда true, тогда зачеркнутый, когда false тогда обычный, но наш checkbox не обозначается как выделенный, это нужно исправить. Переходим в TodoItem  */}\n// 66 {/* В Компоненте App мы подключаем наш созданный Компонент import Context from \"./context\"*/}\n// 67 {/* Так как React.createContext() - это необычный объект в React, для того чтобы мне передавать определённые функции сквозь другие компоненты, мне необходимо обернуть весь шаблон ( return() ) в App в специальный компонент который называется <Context.Provider> </Context.Provider>, <- именно таким образом. То есть я весь JSX нашего компонента оборачиваю в <Context.Provider> </Context.Provider> */}\n// 68 {/* Дальше как свойство в <Context.Provider value={{}}> я могу указать свойство value которое принимает в себя объект value={{}} - Первые фигурные скобки указывают что это как бы что мы там пишем JavaScript, а вторые, внутренние обозначают за тот объект который мы передаем. */}\n// 69 {/* И в этот объект value={{*}} Я могу передавать в принципе что угодно, могу передавать state, function, что угодно. И нам нужно реализовать функционал по удалению определенного task'a, задачи */}\n// 70 {/* Поэтому в Компоненте App выше return я создам функцию removeTask, в которую я передам параметр id, в нем будет лежать id того task'a который мне нужно удалить.  */}\n// 71 {/* Далее в функцию removeTask я передам setTasks из useState, которая будет задавать состояние нашего крестика (useState позволяет нам менять состояние) */}\n// 72 {/* Дальше пробежимся по массиву с помощью метода filter, где на каждой итерации я буду получать объект task, и дальше буду сравнивать, если task.id не будет равен параметру функции id, тогда мы оставляем элемент в массиве setTasks( tasks.filter( (task) => task.id !== id)), если же он совпадает, то он удалится - Это самый простой способ чтобы удалить элемент. Если task.id !== id, не будут равны, тогда мы фильтруем эти элементы, возвращаем, оставляем, иные все удаляем */}\n// 73 {/* Теперь у нас есть функция removeTask, и мы её можем передать в качестве значения value{{removeTask}} в Компонент Todoclose -> Todoclose */}\n// 82 {/* Для того чтобы написать что нету активных задач после удаления всех tasks. Находим Компонент TodoList, и там где мы его выводим, мы также можем добавить определённые условия  */}\n// 83 {/* Для того чтобы обратиться к javaScript внутри шаблона JSX, мы указываем внутри return() фигурные скобки {}, и дальше спрашиваем - если в массиве и в его поле length tasks.length (Есть что-то отличное от нуля ), то тогда мы будем выводить наш Компонент TodoList, а иначе мы будет указывать через тэг и тернарный оператор <h2 className=\"todolist__\">No active tasks</h2> что нету активных задач */}\n// 84 {/* Следующий этап, это добавить формочку которая позволит нам добавлять новые tasks */}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}