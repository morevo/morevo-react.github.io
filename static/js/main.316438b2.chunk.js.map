{"version":3,"sources":["Todo/Todoclose.js","Todo/Todoitem.js","Todo/Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["TodoClose","type","className","data-exit","xlinkHref","styles","li","padding","margin","position","display","alignItems","justifyContent","border","borderRadius","strong","newInput","width","height","liSpan","change","background","TodoItem","item","index","style","id","name","value","htmlFor","title","ul","listStyle","fontSize","TodoList","props","tasks","map","App","completed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gLAEe,SAASA,IACtB,OACE,wBAAQC,KAAK,SAASC,UAAU,eAAeC,YAAU,QAAzD,SACE,qBAAKD,UAAU,oBAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,qBAAKA,UAAU,wBAAwBE,UAAU,iBCJ3D,IAAIC,EAAS,CACXC,GAAI,CACFC,QAAS,WACTC,OAAQ,SACRC,SAAU,WACVC,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAChBC,OAAQ,oBACRC,aAAc,QAGhBC,OAAQ,CACNP,OAAQ,gBAGVQ,SAAU,CACRC,MAAO,OACPC,OAAQ,OACRJ,aAAc,OACdN,OAAQ,YAGVW,OAAQ,CACNT,QAAS,OACTC,WAAY,UAGdS,OAAQ,CACNC,WAAY,QA6BDC,MAzBf,YAAoC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAExB,OACE,qBAAIC,MAAOpB,EAAOC,GAAlB,UACE,uBAAMmB,MAAOpB,EAAOc,OAApB,UACE,uBAAMjB,UAAU,YAAhB,UACE,uBAAOwB,GAAIF,EAAQ,EAAGtB,UAAU,kBAAkBD,KAAK,WAAW0B,KAAK,WAAWC,MAAM,QAC1F,uBAAOC,QAASL,EAAQ,EAAGtB,UAAU,sBAAsBuB,MAAOpB,EAAOW,cAEzE,yBAAQS,MAAOpB,EAAOU,OAAtB,UAA+BS,EAAQ,EAAvC,QACCD,EAAKO,SAGR,cAAC9B,EAAD,QC9CFK,EAAS,CACX0B,GAAI,CACFvB,OAAQ,SACRD,QAAS,OACTyB,UAAW,OACXC,SAAU,SA2BCC,MAvBf,SAAkBC,GAChB,OACE,oBAAIV,MAAOpB,EAAO0B,GAAlB,SACGI,EAAMC,MAAMC,KAAI,SAACd,EAAMC,GAAP,OACf,cAAC,EAAD,CAAUD,KAAMA,EAAMC,MAAOA,GAAYD,EAAKG,UCKvCY,MAlBf,WAQE,OACE,qBAAKpC,UAAU,OAAf,SACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,cAAd,uBACA,cAAC,EAAD,CAAUkC,MAXJ,CACV,CAAEV,GAAI,EAAGa,WAAW,EAAOT,MAAO,oBAClC,CAAEJ,GAAI,EAAGa,WAAW,EAAOT,MAAO,eAClC,CAAEJ,GAAI,EAAGa,WAAW,EAAOT,MAAO,oBAClC,CAAEJ,GAAI,EAAGa,WAAW,EAAOT,MAAO,mCAClC,CAAEJ,GAAI,EAAGa,WAAW,EAAOT,MAAO,sCCGvBU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.316438b2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function TodoClose() {\n  return (\n    <button type=\"button\" className=\"modal__close\" data-exit=\"close\">\n      <div className=\"modal__pleace-img\">\n        <svg className=\"modal__close-img\">\n          <use className=\"modal__close-img-icon\" xlinkHref=\"#close\"></use>\n        </svg>\n      </div>\n    </button>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TodoClose from \"./Todoclose\";\nlet styles = {\n  li: {\n    padding: \"0.4rem 0\",\n    margin: \"0.5rem\",\n    position: \"relative\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    border: \"1px solid #6a696b\",\n    borderRadius: \"15px\",\n  },\n\n  strong: {\n    margin: \"0 0.3rem 0 0\",\n  },\n\n  newInput: {\n    width: \"17px\",\n    height: \"17px\",\n    borderRadius: \"20px\",\n    margin: \"0 0.4rem\",\n  },\n\n  liSpan: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  \n  change: {\n    background: \"red\",\n  }\n};\n\nfunction TodoItem({ item, index }) {\n  // Если мне нужно получить сразу элемент не оборачивая его в объект в параметрах функции, тогда я пишу название элемента в {} скобках\n  return (\n    <li style={styles.li}>\n      <span style={styles.liSpan}>\n        <span className=\"container\">\n          <input id={index + 1} className=\"todoitem__input\" type=\"checkbox\" name=\"checkbox\" value=\"yes\" />\n        <label htmlFor={index + 1} className=\"todoitem__new-input\" style={styles.newInput}></label>\n        </span>\n        <strong style={styles.strong}>{index + 1}. </strong>\n        {item.title}\n      </span>\n\n      <TodoClose />\n    </li>\n  );\n}\n\n// 31 {/* Добавим также валидацию для компонента Todoitem.js. Загружаем библиотеку prop-types также в файл TodoItem, Удаляем export default перед объявлением функции, добавляем в конец файла, пишем свойства для функции TodoItem.propTypes, и определяем элементы. item: PropTypes.object.isRequired - item это объект, который необходимый, требуемый для работы этого компонента TodoItem. И index: PropTypes.number.isRequired - index это тип number, который необходимый для работы этого компонента TodoItem */}\n// 33 {/* Теперь поработаем над шаблоном каждого из элементов <li>, превратим их во что-то более красивое, переходим в компонент Todoitem, и задаем некоторую структуру, в тэге <li></li> будет лежать тэг span, внутри span будет лежать элемент input с type=\"checkbox\". Кладём все элементы внутри <li> внутрь тэга <span>, а после тэга <span> в <li> мы будем показывать тэг <button> а внутри него будет лежать специальный html символ - &times; который добавляем крестик */}\nTodoItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  index: PropTypes.number,\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./Todoitem\";\nimport PropTypes from \"prop-types\"; // Импортируем библиотеку PropTypes из \"prop-types\"\nlet styles = {\n  ul: {\n    margin: \"0 auto\",\n    padding: \"1rem\",\n    listStyle: \"none\",\n    fontSize: \"1rem\",\n  },\n};\n\nfunction TodoList(props) {  // Мой массив tasks здесь обернулся в объект, потому как мы его не взяли в {}\n  return (\n    <ul style={styles.ul}>\n      {props.tasks.map((item, index) => (\n        <TodoItem item={item} index={index} key={item.id} />\n      ))}\n    </ul>\n  );\n}\n\n// 24 {/* Про типизацию, JS это не типизированный язык программирования, и мы можем передавать одним и тем же объектам разные типы, и есть потенциальные ошибки при передаче свойств. Поэтому в React хорошей практикой является описание входящих свойств в нужный компонент. То есть если я передаю объект от <TodoList todos={todos}></TodoList>, TodoList(props) значит я должен это описать что пришел именно объект. */}\n// 25 {/* Устанавливаем библиотеку через npm, команда установки npm install prop-types. */}\n// 26 {/* Мы значем что мы принимаем в TodoList.js в параметр функции объект props, в котором лежит наш массив объектов tasks */}\n// 27 {/* Импортируем библиотеку PropTypes из \"prop-types\" в файл где нужно обозначить входящее свойство(параметр) в компонент */}\n// 28 {/* Для того чтобы добавить валидацию того что это за свойство, убираем приставку export default перед объявлением функции, и дальше, в конце кода мы будет экспортировать эту функцию отдельно */}\n// 29 {/* Теперь мы можем обратиться к функции TodoList и определить у нее свойство которое называется propTypes, это обычный объект, где мы будем описывать в качестве значения ключа, название свойства, у меня это tasks, и дальше мы будем пользоваться библиотекой prop-types чтобы определить её тип */}\n// 30 {/* С помощью библиотеки prop-types мы можем делать более сложные валидации, например указать что tasks это не просто массив, а массив объектов - tasks: PropTypes.arrayOf(PropTypes.object).isRequired. isRequired говорит о том, что массив с объектами нам нужен для работы с данным компонентов, то есть с функцией TodoList  */}\n// 31 {/* Добавим также валидацию для компонента Todoitem.js ->*/}\n// 32 {/* Сейчас, в компоненте TodoList в качестве index мы передаем числа, но если мы поменяем index в коде выше и сделаем его строкой, то мы увидим ошибку в консоле, так как компонент TodoItem ожидает как раз таки число, а мы передаем строку, так как мы указывали что index это число в проверке на prop-types, получается это такой мини тест, мини статичность */}\nTodoList.propTypes = {\n    tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default TodoList;","import React from \"react\";\nimport TodoList from \"./Todo/Todolist\";\n\nfunction App() {\n  let tasks = [\n    { id: 1, completed: false, title: \"Learn TypeScript\" },\n    { id: 2, completed: false, title: \"Learn React\" },\n    { id: 3, completed: false, title: \"Learn JavaScript\" },\n    { id: 4, completed: false, title: \"Daily to learn some interesting\" },\n    { id: 5, completed: false, title: \"Get an offer on web. dev.\" },\n  ];\n  return (\n    <div className=\"todo\">\n      <div className=\"todo__inner\">\n        <h1 className=\"todo__title\">Todo list</h1>\n        <TodoList tasks={tasks} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}