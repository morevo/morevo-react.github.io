import React from "react";
import TodoItem from "./Todoitem";
import PropTypes from "prop-types"; // Импортируем библиотеку PropTypes из "prop-types"
let styles = {
  ul: {
    margin: "0 auto",
    padding: "1rem",
    listStyle: "none",
    fontSize: "1rem",
  },
};

function TodoList(props) {  // Мой массив tasks здесь обернулся в объект, потому как мы его не взяли в {}
  return (
    <ul style={styles.ul}>
      {props.tasks.map((item, index) => (
        <TodoItem item={item} index={index} key={item.id} />
      ))}
    </ul>
  );
}

// 24 {/* Про типизацию, JS это не типизированный язык программирования, и мы можем передавать одним и тем же объектам разные типы, и есть потенциальные ошибки при передаче свойств. Поэтому в React хорошей практикой является описание входящих свойств в нужный компонент. То есть если я передаю объект от <TodoList todos={todos}></TodoList>, TodoList(props) значит я должен это описать что пришел именно объект. */}
// 25 {/* Устанавливаем библиотеку через npm, команда установки npm install prop-types. */}
// 26 {/* Мы значем что мы принимаем в TodoList.js в параметр функции объект props, в котором лежит наш массив объектов tasks */}
// 27 {/* Импортируем библиотеку PropTypes из "prop-types" в файл где нужно обозначить входящее свойство(параметр) в компонент */}
// 28 {/* Для того чтобы добавить валидацию того что это за свойство, убираем приставку export default перед объявлением функции, и дальше, в конце кода мы будет экспортировать эту функцию отдельно */}
// 29 {/* Теперь мы можем обратиться к функции TodoList и определить у нее свойство которое называется propTypes, это обычный объект, где мы будем описывать в качестве значения ключа, название свойства, у меня это tasks, и дальше мы будем пользоваться библиотекой prop-types чтобы определить её тип */}
// 30 {/* С помощью библиотеки prop-types мы можем делать более сложные валидации, например указать что tasks это не просто массив, а массив объектов - tasks: PropTypes.arrayOf(PropTypes.object).isRequired. isRequired говорит о том, что массив с объектами нам нужен для работы с данным компонентов, то есть с функцией TodoList  */}
// 31 {/* Добавим также валидацию для компонента Todoitem.js ->*/}
// 32 {/* Сейчас, в компоненте TodoList в качестве index мы передаем числа, но если мы поменяем index в коде выше и сделаем его строкой, то мы увидим ошибку в консоле, так как компонент TodoItem ожидает как раз таки число, а мы передаем строку, так как мы указывали что index это число в проверке на prop-types, получается это такой мини тест, мини статичность */}
TodoList.propTypes = {
    tasks: PropTypes.arrayOf(PropTypes.object).isRequired,
}

export default TodoList;